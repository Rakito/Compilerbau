/* This file was generated by SableCC (http://www.sablecc.org/). */

package firstSteps.node;

import firstSteps.analysis.*;

@SuppressWarnings("nls")
public final class AIfex extends PIfex
{
    private PExpr _left_;
    private TQuery _query_;
    private PExpr _middle_;
    private TColon _colon_;
    private PExpr _right_;

    public AIfex()
    {
        // Constructor
    }

    public AIfex(
        @SuppressWarnings("hiding") PExpr _left_,
        @SuppressWarnings("hiding") TQuery _query_,
        @SuppressWarnings("hiding") PExpr _middle_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PExpr _right_)
    {
        // Constructor
        setLeft(_left_);

        setQuery(_query_);

        setMiddle(_middle_);

        setColon(_colon_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new AIfex(
            cloneNode(this._left_),
            cloneNode(this._query_),
            cloneNode(this._middle_),
            cloneNode(this._colon_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfex(this);
    }

    public PExpr getLeft()
    {
        return this._left_;
    }

    public void setLeft(PExpr node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TQuery getQuery()
    {
        return this._query_;
    }

    public void setQuery(TQuery node)
    {
        if(this._query_ != null)
        {
            this._query_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._query_ = node;
    }

    public PExpr getMiddle()
    {
        return this._middle_;
    }

    public void setMiddle(PExpr node)
    {
        if(this._middle_ != null)
        {
            this._middle_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._middle_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PExpr getRight()
    {
        return this._right_;
    }

    public void setRight(PExpr node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._left_)
            + toString(this._query_)
            + toString(this._middle_)
            + toString(this._colon_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._query_ == child)
        {
            this._query_ = null;
            return;
        }

        if(this._middle_ == child)
        {
            this._middle_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left_ == oldChild)
        {
            setLeft((PExpr) newChild);
            return;
        }

        if(this._query_ == oldChild)
        {
            setQuery((TQuery) newChild);
            return;
        }

        if(this._middle_ == oldChild)
        {
            setMiddle((PExpr) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
