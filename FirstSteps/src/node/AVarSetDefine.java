/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AVarSetDefine extends PDefine
{
    private PType _type_;
    private PSet _set_;

    public AVarSetDefine()
    {
        // Constructor
    }

    public AVarSetDefine(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") PSet _set_)
    {
        // Constructor
        setType(_type_);

        setSet(_set_);

    }

    @Override
    public Object clone()
    {
        return new AVarSetDefine(
            cloneNode(this._type_),
            cloneNode(this._set_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarSetDefine(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public PSet getSet()
    {
        return this._set_;
    }

    public void setSet(PSet node)
    {
        if(this._set_ != null)
        {
            this._set_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._set_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._set_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._set_ == child)
        {
            this._set_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._set_ == oldChild)
        {
            setSet((PSet) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
