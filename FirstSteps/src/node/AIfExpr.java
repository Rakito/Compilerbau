/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AIfExpr extends PExpr
{
    private PExpr _if_;
    private TQuery _query_;
    private PTerm _then_;
    private TColon _colon_;
    private PTerm _else_;

    public AIfExpr()
    {
        // Constructor
    }

    public AIfExpr(
        @SuppressWarnings("hiding") PExpr _if_,
        @SuppressWarnings("hiding") TQuery _query_,
        @SuppressWarnings("hiding") PTerm _then_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PTerm _else_)
    {
        // Constructor
        setIf(_if_);

        setQuery(_query_);

        setThen(_then_);

        setColon(_colon_);

        setElse(_else_);

    }

    @Override
    public Object clone()
    {
        return new AIfExpr(
            cloneNode(this._if_),
            cloneNode(this._query_),
            cloneNode(this._then_),
            cloneNode(this._colon_),
            cloneNode(this._else_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfExpr(this);
    }

    public PExpr getIf()
    {
        return this._if_;
    }

    public void setIf(PExpr node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TQuery getQuery()
    {
        return this._query_;
    }

    public void setQuery(TQuery node)
    {
        if(this._query_ != null)
        {
            this._query_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._query_ = node;
    }

    public PTerm getThen()
    {
        return this._then_;
    }

    public void setThen(PTerm node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PTerm getElse()
    {
        return this._else_;
    }

    public void setElse(PTerm node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._query_)
            + toString(this._then_)
            + toString(this._colon_)
            + toString(this._else_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._query_ == child)
        {
            this._query_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((PExpr) newChild);
            return;
        }

        if(this._query_ == oldChild)
        {
            setQuery((TQuery) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((PTerm) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
