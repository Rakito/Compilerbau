/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AForeachLogic extends PLogic
{
    private TForeach _foreach_;
    private PType _type_;
    private TId _object_;
    private TIn _in_;
    private TId _collection_;
    private TDo _do_;
    private TLBrace _lBrace_;
    private PImpl _impl_;

    public AForeachLogic()
    {
        // Constructor
    }

    public AForeachLogic(
        @SuppressWarnings("hiding") TForeach _foreach_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TId _object_,
        @SuppressWarnings("hiding") TIn _in_,
        @SuppressWarnings("hiding") TId _collection_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") PImpl _impl_)
    {
        // Constructor
        setForeach(_foreach_);

        setType(_type_);

        setObject(_object_);

        setIn(_in_);

        setCollection(_collection_);

        setDo(_do_);

        setLBrace(_lBrace_);

        setImpl(_impl_);

    }

    @Override
    public Object clone()
    {
        return new AForeachLogic(
            cloneNode(this._foreach_),
            cloneNode(this._type_),
            cloneNode(this._object_),
            cloneNode(this._in_),
            cloneNode(this._collection_),
            cloneNode(this._do_),
            cloneNode(this._lBrace_),
            cloneNode(this._impl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForeachLogic(this);
    }

    public TForeach getForeach()
    {
        return this._foreach_;
    }

    public void setForeach(TForeach node)
    {
        if(this._foreach_ != null)
        {
            this._foreach_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._foreach_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TId getObject()
    {
        return this._object_;
    }

    public void setObject(TId node)
    {
        if(this._object_ != null)
        {
            this._object_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._object_ = node;
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    public TId getCollection()
    {
        return this._collection_;
    }

    public void setCollection(TId node)
    {
        if(this._collection_ != null)
        {
            this._collection_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._collection_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public PImpl getImpl()
    {
        return this._impl_;
    }

    public void setImpl(PImpl node)
    {
        if(this._impl_ != null)
        {
            this._impl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._impl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._foreach_)
            + toString(this._type_)
            + toString(this._object_)
            + toString(this._in_)
            + toString(this._collection_)
            + toString(this._do_)
            + toString(this._lBrace_)
            + toString(this._impl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._foreach_ == child)
        {
            this._foreach_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._object_ == child)
        {
            this._object_ = null;
            return;
        }

        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        if(this._collection_ == child)
        {
            this._collection_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._impl_ == child)
        {
            this._impl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._foreach_ == oldChild)
        {
            setForeach((TForeach) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._object_ == oldChild)
        {
            setObject((TId) newChild);
            return;
        }

        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        if(this._collection_ == oldChild)
        {
            setCollection((TId) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._impl_ == oldChild)
        {
            setImpl((PImpl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
