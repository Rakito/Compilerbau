/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AFunctionFunction extends PFunction
{
    private TFunc _func_;
    private TLArrow _lArrow_;
    private PParas _returns_;
    private TRArrow _rArrow_;
    private TId _funcName_;
    private TLPar _lPar_;
    private PParas _params_;
    private TRPar _rPar_;
    private PImpl _impl_;

    public AFunctionFunction()
    {
        // Constructor
    }

    public AFunctionFunction(
        @SuppressWarnings("hiding") TFunc _func_,
        @SuppressWarnings("hiding") TLArrow _lArrow_,
        @SuppressWarnings("hiding") PParas _returns_,
        @SuppressWarnings("hiding") TRArrow _rArrow_,
        @SuppressWarnings("hiding") TId _funcName_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PParas _params_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PImpl _impl_)
    {
        // Constructor
        setFunc(_func_);

        setLArrow(_lArrow_);

        setReturns(_returns_);

        setRArrow(_rArrow_);

        setFuncName(_funcName_);

        setLPar(_lPar_);

        setParams(_params_);

        setRPar(_rPar_);

        setImpl(_impl_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionFunction(
            cloneNode(this._func_),
            cloneNode(this._lArrow_),
            cloneNode(this._returns_),
            cloneNode(this._rArrow_),
            cloneNode(this._funcName_),
            cloneNode(this._lPar_),
            cloneNode(this._params_),
            cloneNode(this._rPar_),
            cloneNode(this._impl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionFunction(this);
    }

    public TFunc getFunc()
    {
        return this._func_;
    }

    public void setFunc(TFunc node)
    {
        if(this._func_ != null)
        {
            this._func_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._func_ = node;
    }

    public TLArrow getLArrow()
    {
        return this._lArrow_;
    }

    public void setLArrow(TLArrow node)
    {
        if(this._lArrow_ != null)
        {
            this._lArrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lArrow_ = node;
    }

    public PParas getReturns()
    {
        return this._returns_;
    }

    public void setReturns(PParas node)
    {
        if(this._returns_ != null)
        {
            this._returns_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returns_ = node;
    }

    public TRArrow getRArrow()
    {
        return this._rArrow_;
    }

    public void setRArrow(TRArrow node)
    {
        if(this._rArrow_ != null)
        {
            this._rArrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rArrow_ = node;
    }

    public TId getFuncName()
    {
        return this._funcName_;
    }

    public void setFuncName(TId node)
    {
        if(this._funcName_ != null)
        {
            this._funcName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcName_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PParas getParams()
    {
        return this._params_;
    }

    public void setParams(PParas node)
    {
        if(this._params_ != null)
        {
            this._params_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._params_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PImpl getImpl()
    {
        return this._impl_;
    }

    public void setImpl(PImpl node)
    {
        if(this._impl_ != null)
        {
            this._impl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._impl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._func_)
            + toString(this._lArrow_)
            + toString(this._returns_)
            + toString(this._rArrow_)
            + toString(this._funcName_)
            + toString(this._lPar_)
            + toString(this._params_)
            + toString(this._rPar_)
            + toString(this._impl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._func_ == child)
        {
            this._func_ = null;
            return;
        }

        if(this._lArrow_ == child)
        {
            this._lArrow_ = null;
            return;
        }

        if(this._returns_ == child)
        {
            this._returns_ = null;
            return;
        }

        if(this._rArrow_ == child)
        {
            this._rArrow_ = null;
            return;
        }

        if(this._funcName_ == child)
        {
            this._funcName_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._params_ == child)
        {
            this._params_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._impl_ == child)
        {
            this._impl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._func_ == oldChild)
        {
            setFunc((TFunc) newChild);
            return;
        }

        if(this._lArrow_ == oldChild)
        {
            setLArrow((TLArrow) newChild);
            return;
        }

        if(this._returns_ == oldChild)
        {
            setReturns((PParas) newChild);
            return;
        }

        if(this._rArrow_ == oldChild)
        {
            setRArrow((TRArrow) newChild);
            return;
        }

        if(this._funcName_ == oldChild)
        {
            setFuncName((TId) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._params_ == oldChild)
        {
            setParams((PParas) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._impl_ == oldChild)
        {
            setImpl((PImpl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
