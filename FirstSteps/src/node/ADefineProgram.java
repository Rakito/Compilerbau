/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ADefineProgram extends PProgram
{
    private PDefine _define_;
    private PProgram _program_;

    public ADefineProgram()
    {
        // Constructor
    }

    public ADefineProgram(
        @SuppressWarnings("hiding") PDefine _define_,
        @SuppressWarnings("hiding") PProgram _program_)
    {
        // Constructor
        setDefine(_define_);

        setProgram(_program_);

    }

    @Override
    public Object clone()
    {
        return new ADefineProgram(
            cloneNode(this._define_),
            cloneNode(this._program_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADefineProgram(this);
    }

    public PDefine getDefine()
    {
        return this._define_;
    }

    public void setDefine(PDefine node)
    {
        if(this._define_ != null)
        {
            this._define_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._define_ = node;
    }

    public PProgram getProgram()
    {
        return this._program_;
    }

    public void setProgram(PProgram node)
    {
        if(this._program_ != null)
        {
            this._program_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._program_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._define_)
            + toString(this._program_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._define_ == child)
        {
            this._define_ = null;
            return;
        }

        if(this._program_ == child)
        {
            this._program_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._define_ == oldChild)
        {
            setDefine((PDefine) newChild);
            return;
        }

        if(this._program_ == oldChild)
        {
            setProgram((PProgram) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
