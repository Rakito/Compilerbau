/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AIncludeProgram extends PProgram
{
    private TInclude _include_;
    private TId _id_;
    private TSemicolon _semicolon_;
    private PProgram _program_;

    public AIncludeProgram()
    {
        // Constructor
    }

    public AIncludeProgram(
        @SuppressWarnings("hiding") TInclude _include_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_,
        @SuppressWarnings("hiding") PProgram _program_)
    {
        // Constructor
        setInclude(_include_);

        setId(_id_);

        setSemicolon(_semicolon_);

        setProgram(_program_);

    }

    @Override
    public Object clone()
    {
        return new AIncludeProgram(
            cloneNode(this._include_),
            cloneNode(this._id_),
            cloneNode(this._semicolon_),
            cloneNode(this._program_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIncludeProgram(this);
    }

    public TInclude getInclude()
    {
        return this._include_;
    }

    public void setInclude(TInclude node)
    {
        if(this._include_ != null)
        {
            this._include_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._include_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    public PProgram getProgram()
    {
        return this._program_;
    }

    public void setProgram(PProgram node)
    {
        if(this._program_ != null)
        {
            this._program_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._program_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._include_)
            + toString(this._id_)
            + toString(this._semicolon_)
            + toString(this._program_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._include_ == child)
        {
            this._include_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        if(this._program_ == child)
        {
            this._program_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._include_ == oldChild)
        {
            setInclude((TInclude) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        if(this._program_ == oldChild)
        {
            setProgram((PProgram) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
