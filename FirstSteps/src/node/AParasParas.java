/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AParasParas extends PParas
{
    private PParas _paras_;
    private TComma _comma_;
    private PExpr _expr_;

    public AParasParas()
    {
        // Constructor
    }

    public AParasParas(
        @SuppressWarnings("hiding") PParas _paras_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PExpr _expr_)
    {
        // Constructor
        setParas(_paras_);

        setComma(_comma_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new AParasParas(
            cloneNode(this._paras_),
            cloneNode(this._comma_),
            cloneNode(this._expr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParasParas(this);
    }

    public PParas getParas()
    {
        return this._paras_;
    }

    public void setParas(PParas node)
    {
        if(this._paras_ != null)
        {
            this._paras_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paras_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._paras_)
            + toString(this._comma_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._paras_ == child)
        {
            this._paras_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._paras_ == oldChild)
        {
            setParas((PParas) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
