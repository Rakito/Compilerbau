/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AWhileLogic extends PLogic
{
    private TWhile _while_;
    private PTerm _term_;
    private TDo _do_;
    private TLBrace _lBrace_;
    private PImpl _impl_;

    public AWhileLogic()
    {
        // Constructor
    }

    public AWhileLogic(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PTerm _term_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") PImpl _impl_)
    {
        // Constructor
        setWhile(_while_);

        setTerm(_term_);

        setDo(_do_);

        setLBrace(_lBrace_);

        setImpl(_impl_);

    }

    @Override
    public Object clone()
    {
        return new AWhileLogic(
            cloneNode(this._while_),
            cloneNode(this._term_),
            cloneNode(this._do_),
            cloneNode(this._lBrace_),
            cloneNode(this._impl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileLogic(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public PImpl getImpl()
    {
        return this._impl_;
    }

    public void setImpl(PImpl node)
    {
        if(this._impl_ != null)
        {
            this._impl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._impl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._term_)
            + toString(this._do_)
            + toString(this._lBrace_)
            + toString(this._impl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._impl_ == child)
        {
            this._impl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._impl_ == oldChild)
        {
            setImpl((PImpl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
