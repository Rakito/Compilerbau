Helpers
 digit = ['0' .. '9'];
 letter = ['a' .. 'z'] | ['A' .. 'Z'];
 any_character = [0x0 .. 0xfffff];
 true = 'TRUE' | 'true' ;
 false ='FALSE' | 'false' ;
 null ='NULL' | 'null' ;
 star = '*';
 cstart = 'nativC>';
 cend = '<nativC';
 

Tokens
 
 define = 'define';
 func = 'func';
 begin = 'begin';
 end = 'end';
 cons = 'cons';
 where = 'where';
 break = 'break'; 
 returnt = 'return';
 null = null ;
 include = 'include';
 void = 'void';
 is = 'is';
 call = 'call';
 bool = true | false;
 struct = 'struct';
 while = 'while';
 do = 'do';
 for = 'for';
 foreach = 'foreach';
 in = 'in';
 new = 'new';
 destroy = 'destroy';
 
 smaller = 'smaller';
 bigger = 'bigger';
 
 id = ( letter | star ) ( digit | letter | star )*;
 number = digit+;
 plus = '+';
 minus = '-';
 star = star;
 times = 'times';
 percent = '%';
 dot = '.';
 comma = ',';
 query ='?';
 colon = ':';
 semicolon = ';';
 l_box = '[';
 r_box = ']';
 l_par = '(';
 r_par = ')';
 l_brace = '{';
 r_brace = '}';
 l_arrow = '<';
 r_arrow = '>';
 blank = (' ')*;
 ampersand = '&';
 slash = '/';
 question = '?';
 exclamation = '!';
 at = '@';
 tilde = '~';
 section = '¤';
 underscore = '_';
 pipe = '|';
 hash = '#';
 caret = '^';
 degree = '¡';
 blackslash ='\';
 equals = '=';
 quote = '"';

 ccode = cstart ( any_character )* cend;
 
 return = ( 13 | 10 );
 tab = 9 ;
 comment = 'ÚÚ' ( any_character )*;
 
 endoffile = 4 ;


Ignored Tokens
 comment, blank, tab, return ;
 
 

Productions

 program = 
  {eof} T.end |
  {include} T.include id semicolon program |
  {define} P.define program |
  {struct} P.struct program |
  {function} P.function program ;

 define = 
  {var} P.type id semicolon |
  {var_set} P.type set ;
  
 struct = 
  {struct} id l_brace struct_body ;
  
 struct_body =
  {end} r_brace |
  {define} P.define struct_body |
  {constructor} P.constructor struct_body ;
  
 constructor =
  {cons} T.cons id l_par param l_brace impl ;
  
 function = 
  {function} type id l_par param l_brace impl ;
  
 param = 
  {end} r_par |
  {one} type id r_par |
  {another} type id comma param ; 
  
 impl =
  {end} r_brace |
  {return} T.returnt expr r_brace | 
  {print} at expr semicolon impl |
  {expr} expr impl |
  {define} P.define impl ;
  

 expr =  
  {operation} operation |
  {func} P.func |
  {logic} logic |
  {term} term |
  {set} set ;
  
 set =
  {set} id equals term semicolon;
  
 func = 
  {func} T.call id l_par func_para |
  {new} T.new id l_par func_para |
  {destroy} T.destroy id ;
  
 func_para =
  {end} r_par |
  {one} term r_par |
  {another} term comma func_para ;

 logic =
  {if} [if]:term query [thenin]:l_brace [then]:impl |
  {ifelse} [if]:term query [thenin]:l_brace [then]:impl colon [elsein]:l_brace [else]:impl |
  {while} T.while term T.do l_brace impl ;

 operation = 
  {same} [left]:term is [right]:expr |
  {plus} [left]:term plus [right]:expr |
  {smaller} [left]:term smaller [right]:expr |
  {bigger} [left]:term bigger [right]:expr |
  {minus} [left]:term minus [right]:expr |
  {mult} [left]:term star [right]:expr |
  {div} [left]:term slash [right]:expr |
  {mod} [left]:term percent [right]:expr ; 

 term = 
  {expr} l_par expr r_par |
  {id} id |
  {number} number |
  {null} T.null |
  {bool} T.bool ;
   
 type =
  {void} l_arrow void r_arrow |
  {type} l_arrow id r_arrow ;

