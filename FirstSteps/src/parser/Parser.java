/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce ADefineDef */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AParaParas */
		    {
			ArrayList<Object> list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AParasParas */
		    {
			ArrayList<Object> list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AIfex */
		    {
			ArrayList<Object> list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AImpl */
		    {
			ArrayList<Object> list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce AFactorExpr */
		    {
			ArrayList<Object> list = new5();
			push(goTo(4), list, false);
		    }
		    break;
                    case 6: /* reduce AFunctionExpr */
		    {
			ArrayList<Object> list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce AConstructorExpr */
		    {
			ArrayList<Object> list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce APlusExpr */
		    {
			ArrayList<Object> list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AMinusExpr */
		    {
			ArrayList<Object> list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce AFunctionFunction */
		    {
			ArrayList<Object> list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce ANilConst */
		    {
			ArrayList<Object> list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce AConsConst */
		    {
			ArrayList<Object> list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce ATermFactor */
		    {
			ArrayList<Object> list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce AMultFactor */
		    {
			ArrayList<Object> list = new14();
			push(goTo(7), list, false);
		    }
		    break;
                    case 15: /* reduce ADivFactor */
		    {
			ArrayList<Object> list = new15();
			push(goTo(7), list, false);
		    }
		    break;
                    case 16: /* reduce AModFactor */
		    {
			ArrayList<Object> list = new16();
			push(goTo(7), list, false);
		    }
		    break;
                    case 17: /* reduce ANumberTerm */
		    {
			ArrayList<Object> list = new17();
			push(goTo(8), list, false);
		    }
		    break;
                    case 18: /* reduce AIdTerm */
		    {
			ArrayList<Object> list = new18();
			push(goTo(8), list, false);
		    }
		    break;
                    case 19: /* reduce AExprTerm */
		    {
			ArrayList<Object> list = new19();
			push(goTo(8), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PDef node1 = (PDef) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ADefineDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDef pdefNode1;
        {
            // Block
        TDefine tdefineNode2;
        TId tidNode3;
        TEquals tequalsNode4;
        PExpr pexprNode5;
        tdefineNode2 = (TDefine)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);

        pdefNode1 = new ADefineDef(tdefineNode2, tidNode3, tequalsNode4, pexprNode5);
        }
	nodeList.add(pdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AParaParas */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParas pparasNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pparasNode1 = new AParaParas(pexprNode2);
        }
	nodeList.add(pparasNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AParasParas */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParas pparasNode1;
        {
            // Block
        PParas pparasNode2;
        TComma tcommaNode3;
        PExpr pexprNode4;
        pparasNode2 = (PParas)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pparasNode1 = new AParasParas(pparasNode2, tcommaNode3, pexprNode4);
        }
	nodeList.add(pparasNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AIfex */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfex pifexNode1;
        {
            // Block
        PExpr pexprNode2;
        TQuery tqueryNode3;
        PExpr pexprNode4;
        TColon tcolonNode5;
        PExpr pexprNode6;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tqueryNode3 = (TQuery)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tcolonNode5 = (TColon)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);

        pifexNode1 = new AIfex(pexprNode2, tqueryNode3, pexprNode4, tcolonNode5, pexprNode6);
        }
	nodeList.add(pifexNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AImpl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImpl pimplNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PExpr pexprNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pimplNode1 = new AImpl(tlbraceNode2, pexprNode3, trbraceNode4);
        }
	nodeList.add(pimplNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AFactorExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pexprNode1 = new AFactorExpr(pfactorNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AFunctionExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pexprNode1 = new AFunctionExpr(pfunctionNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AConstructorExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PConst pconstNode2;
        pconstNode2 = (PConst)nodeArrayList1.get(0);

        pexprNode1 = new AConstructorExpr(pconstNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce APlusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        THyphen thyphenNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        thyphenNode3 = (THyphen)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, thyphenNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AFunctionFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TFunc tfuncNode2;
        TLArrow tlarrowNode3;
        PParas pparasNode4;
        TRArrow trarrowNode5;
        TId tidNode6;
        TLPar tlparNode7;
        PParas pparasNode8;
        TRPar trparNode9;
        PImpl pimplNode10;
        tfuncNode2 = (TFunc)nodeArrayList1.get(0);
        tlarrowNode3 = (TLArrow)nodeArrayList2.get(0);
        pparasNode4 = (PParas)nodeArrayList3.get(0);
        trarrowNode5 = (TRArrow)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        tlparNode7 = (TLPar)nodeArrayList6.get(0);
        pparasNode8 = (PParas)nodeArrayList7.get(0);
        trparNode9 = (TRPar)nodeArrayList8.get(0);
        pimplNode10 = (PImpl)nodeArrayList9.get(0);

        pfunctionNode1 = new AFunctionFunction(tfuncNode2, tlarrowNode3, pparasNode4, trarrowNode5, tidNode6, tlparNode7, pparasNode8, trparNode9, pimplNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ANilConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        TCons tconsNode2;
        TId tidNode3;
        TLPar tlparNode4;
        TRPar trparNode5;
        PImpl pimplNode6;
        tconsNode2 = (TCons)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pimplNode6 = (PImpl)nodeArrayList5.get(0);

        pconstNode1 = new ANilConst(tconsNode2, tidNode3, tlparNode4, trparNode5, pimplNode6);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AConsConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        TCons tconsNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PParas pparasNode5;
        TRPar trparNode6;
        PImpl pimplNode7;
        tconsNode2 = (TCons)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparasNode5 = (PParas)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        pimplNode7 = (PImpl)nodeArrayList6.get(0);

        pconstNode1 = new AConsConst(tconsNode2, tidNode3, tlparNode4, pparasNode5, trparNode6, pimplNode7);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfactorNode1 = new ATermFactor(ptermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TAsterisk tasteriskNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tasteriskNode3 = (TAsterisk)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AMultFactor(pfactorNode2, tasteriskNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TSlash tslashNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tslashNode3 = (TSlash)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new ADivFactor(pfactorNode2, tslashNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TPercent tpercentNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tpercentNode3 = (TPercent)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AModFactor(pfactorNode2, tpercentNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ANumberTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermNode1 = new ANumberTerm(tnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AIdTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptermNode1 = new AIdTerm(tidNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AExprTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AExprTerm(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {10, SHIFT, 3}, },
			{{-1, ERROR, 2}, {45, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {43, SHIFT, 4}, },
			{{-1, ERROR, 4}, {1, SHIFT, 5}, {4, SHIFT, 6}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, ERROR, 5}, {27, SHIFT, 15}, },
			{{-1, ERROR, 6}, {10, SHIFT, 16}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 9}, {1, SHIFT, 5}, {4, SHIFT, 6}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, REDUCE, 0}, {12, SHIFT, 18}, {13, SHIFT, 19}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, {14, SHIFT, 20}, {15, SHIFT, 21}, {31, SHIFT, 22}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 15}, {1, SHIFT, 5}, {4, SHIFT, 6}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, ERROR, 16}, {23, SHIFT, 25}, },
			{{-1, ERROR, 17}, {12, SHIFT, 18}, {13, SHIFT, 19}, {24, SHIFT, 26}, },
			{{-1, ERROR, 18}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, ERROR, 19}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, ERROR, 20}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, ERROR, 21}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, ERROR, 22}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, ERROR, 23}, {17, SHIFT, 32}, {28, SHIFT, 33}, },
			{{-1, REDUCE, 1}, {12, SHIFT, 18}, {13, SHIFT, 19}, },
			{{-1, ERROR, 25}, {1, SHIFT, 5}, {4, SHIFT, 6}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, {24, SHIFT, 34}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 8}, {14, SHIFT, 20}, {15, SHIFT, 21}, {31, SHIFT, 22}, },
			{{-1, REDUCE, 9}, {14, SHIFT, 20}, {15, SHIFT, 21}, {31, SHIFT, 22}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 32}, {1, SHIFT, 5}, {4, SHIFT, 6}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, ERROR, 33}, {10, SHIFT, 37}, },
			{{-1, ERROR, 34}, {25, SHIFT, 38}, },
			{{-1, ERROR, 35}, {17, SHIFT, 32}, {24, SHIFT, 40}, },
			{{-1, REDUCE, 2}, {12, SHIFT, 18}, {13, SHIFT, 19}, },
			{{-1, ERROR, 37}, {23, SHIFT, 41}, },
			{{-1, ERROR, 38}, {1, SHIFT, 5}, {4, SHIFT, 6}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 40}, {25, SHIFT, 38}, },
			{{-1, ERROR, 41}, {1, SHIFT, 5}, {4, SHIFT, 6}, {10, SHIFT, 7}, {11, SHIFT, 8}, {23, SHIFT, 9}, },
			{{-1, ERROR, 42}, {12, SHIFT, 18}, {13, SHIFT, 19}, {26, SHIFT, 45}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 44}, {17, SHIFT, 32}, {24, SHIFT, 46}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 46}, {25, SHIFT, 38}, },
			{{-1, REDUCE, 10}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 23}, {25, 35}, {41, 44}, },
			{{-1, -1}, },
			{{-1, 39}, {40, 43}, {46, 47}, },
			{{-1, 24}, {4, 10}, {9, 17}, {32, 36}, {38, 42}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 13}, {18, 27}, {19, 28}, },
			{{-1, 14}, {20, 29}, {21, 30}, {22, 31}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'define'",
			"expecting: id",
			"expecting: EOF",
			"expecting: '='",
			"expecting: 'func', 'cons', id, number, '('",
			"expecting: '<'",
			"expecting: '+', '-', '*', '%', ',', ')', '}', '>', '/', EOF",
			"expecting: '+', '-', EOF",
			"expecting: '+', '-', ',', ')', '}', '>', EOF",
			"expecting: '('",
			"expecting: '+', '-', ')'",
			"expecting: id, number, '('",
			"expecting: ',', '>'",
			"expecting: '+', '-', ',', ')', '>'",
			"expecting: 'func', 'cons', id, number, '(', ')'",
			"expecting: '{'",
			"expecting: ',', ')'",
			"expecting: '+', '-', '}'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 1, 6, 6, 4, 7, 8, 8, 6, 6, 4, 9, 10, 11, 11, 11, 11, 11, 12, 13, 14, 6, 6, 6, 6, 6, 6, 4, 1, 15, 16, 13, 9, 4, 8, 15, 4, 17, 8, 16, 8, 15, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
