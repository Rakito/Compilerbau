/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AEofProgram */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AFunctionProgram */
		    {
			ArrayList<Object> list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce ADefineProgram */
		    {
			ArrayList<Object> list = new2();
			push(goTo(0), list, false);
		    }
		    break;
                    case 3: /* reduce ADefineDefine */
		    {
			ArrayList<Object> list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AFunctionDefine */
		    {
			ArrayList<Object> list = new4();
			push(goTo(1), list, false);
		    }
		    break;
                    case 5: /* reduce AConsDefine */
		    {
			ArrayList<Object> list = new5();
			push(goTo(1), list, false);
		    }
		    break;
                    case 6: /* reduce ANilDefine */
		    {
			ArrayList<Object> list = new6();
			push(goTo(1), list, false);
		    }
		    break;
                    case 7: /* reduce AEndImpl */
		    {
			ArrayList<Object> list = new7();
			push(goTo(2), list, false);
		    }
		    break;
                    case 8: /* reduce AReturnImpl */
		    {
			ArrayList<Object> list = new8();
			push(goTo(2), list, false);
		    }
		    break;
                    case 9: /* reduce AExprImpl */
		    {
			ArrayList<Object> list = new9();
			push(goTo(2), list, false);
		    }
		    break;
                    case 10: /* reduce ADefineImpl */
		    {
			ArrayList<Object> list = new10();
			push(goTo(2), list, false);
		    }
		    break;
                    case 11: /* reduce AEndExpr */
		    {
			ArrayList<Object> list = new11();
			push(goTo(3), list, false);
		    }
		    break;
                    case 12: /* reduce ATermExpr */
		    {
			ArrayList<Object> list = new12();
			push(goTo(3), list, false);
		    }
		    break;
                    case 13: /* reduce AFunctionExpr */
		    {
			ArrayList<Object> list = new13();
			push(goTo(3), list, false);
		    }
		    break;
                    case 14: /* reduce APlusExpr */
		    {
			ArrayList<Object> list = new14();
			push(goTo(3), list, false);
		    }
		    break;
                    case 15: /* reduce AMinusExpr */
		    {
			ArrayList<Object> list = new15();
			push(goTo(3), list, false);
		    }
		    break;
                    case 16: /* reduce AMultExpr */
		    {
			ArrayList<Object> list = new16();
			push(goTo(3), list, false);
		    }
		    break;
                    case 17: /* reduce ADivExpr */
		    {
			ArrayList<Object> list = new17();
			push(goTo(3), list, false);
		    }
		    break;
                    case 18: /* reduce AModExpr */
		    {
			ArrayList<Object> list = new18();
			push(goTo(3), list, false);
		    }
		    break;
                    case 19: /* reduce AIfExpr */
		    {
			ArrayList<Object> list = new19();
			push(goTo(3), list, false);
		    }
		    break;
                    case 20: /* reduce AConcatExpr */
		    {
			ArrayList<Object> list = new20();
			push(goTo(3), list, false);
		    }
		    break;
                    case 21: /* reduce AFuncCallFunction */
		    {
			ArrayList<Object> list = new21();
			push(goTo(4), list, false);
		    }
		    break;
                    case 22: /* reduce AIdTerm */
		    {
			ArrayList<Object> list = new22();
			push(goTo(5), list, false);
		    }
		    break;
                    case 23: /* reduce ANumberTerm */
		    {
			ArrayList<Object> list = new23();
			push(goTo(5), list, false);
		    }
		    break;
                    case 24: /* reduce ANullTerm */
		    {
			ArrayList<Object> list = new24();
			push(goTo(5), list, false);
		    }
		    break;
                    case 25: /* reduce ABoolTerm */
		    {
			ArrayList<Object> list = new25();
			push(goTo(5), list, false);
		    }
		    break;
                    case 26: /* reduce AExprTerm */
		    {
			ArrayList<Object> list = new26();
			push(goTo(5), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AEofProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TEnd tendNode2;
        tendNode2 = (TEnd)nodeArrayList1.get(0);

        pprogramNode1 = new AEofProgram(tendNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AFunctionProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pprogramNode1 = new AFunctionProgram(pfunctionNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADefineProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDefine pdefineNode2;
        PProgram pprogramNode3;
        pdefineNode2 = (PDefine)nodeArrayList1.get(0);
        pprogramNode3 = (PProgram)nodeArrayList2.get(0);

        pprogramNode1 = new ADefineProgram(pdefineNode2, pprogramNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADefineDefine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefine pdefineNode1;
        {
            // Block
        TDefine tdefineNode2;
        TId tidNode3;
        TEquals tequalsNode4;
        PTerm ptermNode5;
        tdefineNode2 = (TDefine)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        ptermNode5 = (PTerm)nodeArrayList4.get(0);

        pdefineNode1 = new ADefineDefine(tdefineNode2, tidNode3, tequalsNode4, ptermNode5);
        }
	nodeList.add(pdefineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFunctionDefine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefine pdefineNode1;
        {
            // Block
        TFunc tfuncNode2;
        TLArrow tlarrowNode3;
        TId tidNode4;
        TRArrow trarrowNode5;
        TId tidNode6;
        TLPar tlparNode7;
        PTerm ptermNode8;
        TRPar trparNode9;
        TLBrace tlbraceNode10;
        PImpl pimplNode11;
        tfuncNode2 = (TFunc)nodeArrayList1.get(0);
        tlarrowNode3 = (TLArrow)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        trarrowNode5 = (TRArrow)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        tlparNode7 = (TLPar)nodeArrayList6.get(0);
        ptermNode8 = (PTerm)nodeArrayList7.get(0);
        trparNode9 = (TRPar)nodeArrayList8.get(0);
        tlbraceNode10 = (TLBrace)nodeArrayList9.get(0);
        pimplNode11 = (PImpl)nodeArrayList10.get(0);

        pdefineNode1 = new AFunctionDefine(tfuncNode2, tlarrowNode3, tidNode4, trarrowNode5, tidNode6, tlparNode7, ptermNode8, trparNode9, tlbraceNode10, pimplNode11);
        }
	nodeList.add(pdefineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AConsDefine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefine pdefineNode1;
        {
            // Block
        TCons tconsNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PTerm ptermNode5;
        TRPar trparNode6;
        TLBrace tlbraceNode7;
        PImpl pimplNode8;
        tconsNode2 = (TCons)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        ptermNode5 = (PTerm)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        pimplNode8 = (PImpl)nodeArrayList7.get(0);

        pdefineNode1 = new AConsDefine(tconsNode2, tidNode3, tlparNode4, ptermNode5, trparNode6, tlbraceNode7, pimplNode8);
        }
	nodeList.add(pdefineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ANilDefine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefine pdefineNode1;
        {
            // Block
        TCons tconsNode2;
        TId tidNode3;
        TLPar tlparNode4;
        TRPar trparNode5;
        TLBrace tlbraceNode6;
        PImpl pimplNode7;
        tconsNode2 = (TCons)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbraceNode6 = (TLBrace)nodeArrayList5.get(0);
        pimplNode7 = (PImpl)nodeArrayList6.get(0);

        pdefineNode1 = new ANilDefine(tconsNode2, tidNode3, tlparNode4, trparNode5, tlbraceNode6, pimplNode7);
        }
	nodeList.add(pdefineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AEndImpl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImpl pimplNode1;
        {
            // Block
        TRBrace trbraceNode2;
        trbraceNode2 = (TRBrace)nodeArrayList1.get(0);

        pimplNode1 = new AEndImpl(trbraceNode2);
        }
	nodeList.add(pimplNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AReturnImpl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImpl pimplNode1;
        {
            // Block
        TReturnt treturntNode2;
        PExpr pexprNode3;
        TRBrace trbraceNode4;
        treturntNode2 = (TReturnt)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pimplNode1 = new AReturnImpl(treturntNode2, pexprNode3, trbraceNode4);
        }
	nodeList.add(pimplNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AExprImpl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImpl pimplNode1;
        {
            // Block
        PExpr pexprNode2;
        PImpl pimplNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pimplNode3 = (PImpl)nodeArrayList2.get(0);

        pimplNode1 = new AExprImpl(pexprNode2, pimplNode3);
        }
	nodeList.add(pimplNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADefineImpl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PImpl pimplNode1;
        {
            // Block
        PDefine pdefineNode2;
        PImpl pimplNode3;
        pdefineNode2 = (PDefine)nodeArrayList1.get(0);
        pimplNode3 = (PImpl)nodeArrayList2.get(0);

        pimplNode1 = new ADefineImpl(pdefineNode2, pimplNode3);
        }
	nodeList.add(pimplNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AEndExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        THash thashNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        thashNode3 = (THash)nodeArrayList2.get(0);

        pexprNode1 = new AEndExpr(pexprNode2, thashNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprNode1 = new ATermExpr(ptermNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AFunctionExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pexprNode1 = new AFunctionExpr(pfunctionNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce APlusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TDash tdashNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tdashNode3 = (TDash)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, tdashNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AMultExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TAsterisk tasteriskNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tasteriskNode3 = (TAsterisk)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, tasteriskNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ADivExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TSlash tslashNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tslashNode3 = (TSlash)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(pexprNode2, tslashNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AModExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPercent tpercentNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tpercentNode3 = (TPercent)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, tpercentNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AIfExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TQuery tqueryNode3;
        TLBrace tlbraceNode4;
        PImpl pimplNode5;
        TColon tcolonNode6;
        TLBrace tlbraceNode7;
        PImpl pimplNode8;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tqueryNode3 = (TQuery)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        pimplNode5 = (PImpl)nodeArrayList4.get(0);
        tcolonNode6 = (TColon)nodeArrayList5.get(0);
        tlbraceNode7 = (TLBrace)nodeArrayList6.get(0);
        pimplNode8 = (PImpl)nodeArrayList7.get(0);

        pexprNode1 = new AIfExpr(pexprNode2, tqueryNode3, tlbraceNode4, pimplNode5, tcolonNode6, tlbraceNode7, pimplNode8);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AConcatExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TComma tcommaNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AConcatExpr(pexprNode2, tcommaNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AFuncCallFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TCall tcallNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PExpr pexprNode5;
        TRPar trparNode6;
        tcallNode2 = (TCall)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pfunctionNode1 = new AFuncCallFunction(tcallNode2, tidNode3, tlparNode4, pexprNode5, trparNode6);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIdTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptermNode1 = new AIdTerm(tidNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ANumberTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermNode1 = new ANumberTerm(tnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ANullTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        ptermNode1 = new ANullTerm(tnullNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ABoolTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptermNode1 = new ABoolTerm(tboolNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AExprTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AExprTerm(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {11, SHIFT, 5}, },
			{{-1, ERROR, 1}, {13, SHIFT, 9}, },
			{{-1, ERROR, 2}, {30, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {13, SHIFT, 11}, },
			{{-1, ERROR, 5}, {13, SHIFT, 12}, },
			{{-1, ERROR, 6}, {49, ACCEPT, -1}, },
			{{-1, ERROR, 7}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {11, SHIFT, 5}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 9}, {46, SHIFT, 14}, },
			{{-1, ERROR, 10}, {13, SHIFT, 15}, },
			{{-1, ERROR, 11}, {26, SHIFT, 16}, },
			{{-1, ERROR, 12}, {26, SHIFT, 17}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 14}, {8, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, ERROR, 15}, {31, SHIFT, 24}, },
			{{-1, ERROR, 16}, {8, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, {27, SHIFT, 25}, },
			{{-1, ERROR, 17}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 22}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 24}, {13, SHIFT, 31}, },
			{{-1, ERROR, 25}, {28, SHIFT, 32}, },
			{{-1, ERROR, 26}, {27, SHIFT, 33}, },
			{{-1, ERROR, 27}, {15, SHIFT, 34}, {17, SHIFT, 35}, {18, SHIFT, 36}, {20, SHIFT, 37}, {21, SHIFT, 38}, {27, SHIFT, 39}, {32, SHIFT, 40}, {34, SHIFT, 41}, {42, SHIFT, 42}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 30}, {15, SHIFT, 34}, {17, SHIFT, 35}, {18, SHIFT, 36}, {20, SHIFT, 37}, {21, SHIFT, 38}, {27, SHIFT, 43}, {32, SHIFT, 40}, {34, SHIFT, 41}, {42, SHIFT, 42}, },
			{{-1, ERROR, 31}, {26, SHIFT, 44}, },
			{{-1, ERROR, 32}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 4}, {7, SHIFT, 45}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, {29, SHIFT, 46}, },
			{{-1, ERROR, 33}, {28, SHIFT, 50}, },
			{{-1, ERROR, 34}, {8, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, ERROR, 35}, {8, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, ERROR, 36}, {8, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, ERROR, 37}, {8, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, ERROR, 38}, {28, SHIFT, 55}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 40}, {8, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, ERROR, 41}, {8, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 44}, {8, SHIFT, 18}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, ERROR, 45}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 47}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 4}, {7, SHIFT, 45}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, {29, SHIFT, 46}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 4}, {7, SHIFT, 45}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {15, SHIFT, 34}, {17, SHIFT, 35}, {18, SHIFT, 36}, {20, SHIFT, 37}, {21, SHIFT, 38}, {26, SHIFT, 22}, {29, SHIFT, 46}, {32, SHIFT, 40}, {34, SHIFT, 41}, {42, SHIFT, 42}, },
			{{-1, ERROR, 50}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 4}, {7, SHIFT, 45}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, {29, SHIFT, 46}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 55}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 4}, {7, SHIFT, 45}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, {29, SHIFT, 46}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 58}, {27, SHIFT, 64}, },
			{{-1, ERROR, 59}, {15, SHIFT, 34}, {17, SHIFT, 35}, {18, SHIFT, 36}, {20, SHIFT, 37}, {21, SHIFT, 38}, {29, SHIFT, 65}, {32, SHIFT, 40}, {34, SHIFT, 41}, {42, SHIFT, 42}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 63}, {22, SHIFT, 66}, },
			{{-1, ERROR, 64}, {28, SHIFT, 67}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 66}, {28, SHIFT, 68}, },
			{{-1, ERROR, 67}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 4}, {7, SHIFT, 45}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, {29, SHIFT, 46}, },
			{{-1, ERROR, 68}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 4}, {7, SHIFT, 45}, {8, SHIFT, 18}, {11, SHIFT, 5}, {12, SHIFT, 19}, {13, SHIFT, 20}, {14, SHIFT, 21}, {26, SHIFT, 22}, {29, SHIFT, 46}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 19}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 6}, {7, 13}, },
			{{-1, 47}, {0, 7}, {7, 7}, },
			{{-1, 48}, {47, 60}, {49, 61}, {50, 62}, {55, 63}, {67, 69}, {68, 70}, },
			{{-1, 49}, {17, 27}, {22, 30}, {45, 59}, },
			{{-1, 28}, {0, 8}, {7, 8}, },
			{{-1, 29}, {14, 23}, {16, 26}, {34, 51}, {35, 52}, {36, 53}, {37, 54}, {40, 56}, {41, 57}, {44, 58}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'define', 'func', 'end', 'cons', 'call'",
			"expecting: id",
			"expecting: '<'",
			"expecting: EOF",
			"expecting: '='",
			"expecting: '('",
			"expecting: 'null', bool, id, number, '('",
			"expecting: '>'",
			"expecting: 'null', bool, id, number, '(', ')'",
			"expecting: 'null', 'call', bool, id, number, '('",
			"expecting: 'define', 'func', 'end', 'cons', 'return', 'null', 'call', bool, id, number, '+', '*', '%', ',', '?', '(', ')', '}', '-', '/', '#'",
			"expecting: 'define', 'func', 'end', 'cons', 'return', 'null', 'call', bool, id, number, '(', '}'",
			"expecting: '{'",
			"expecting: ')'",
			"expecting: '+', '*', '%', ',', '?', ')', '-', '/', '#'",
			"expecting: 'define', 'func', 'cons', 'return', 'null', 'call', bool, id, number, '+', '*', '%', ',', '?', '(', ')', '}', '-', '/', '#'",
			"expecting: 'define', 'func', 'cons', 'return', 'null', 'call', bool, id, number, '(', '}'",
			"expecting: 'define', 'func', 'cons', 'return', 'null', 'call', bool, id, number, '+', '*', '%', ',', '?', '(', ')', '}', '-', '/', '#', EOF",
			"expecting: 'define', 'func', 'end', 'cons', 'return', 'null', 'call', bool, id, number, '+', '*', '%', ',', '?', ':', '(', ')', '}', '-', '/', '#'",
			"expecting: 'define', 'func', 'cons', 'return', 'null', 'call', bool, id, number, '+', '*', '%', ',', '?', '(', '}', '-', '/', '#'",
			"expecting: '+', '*', '%', ',', '?', '}', '-', '/', '#'",
			"expecting: ':'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 1, 1, 3, 0, 3, 4, 1, 5, 5, 3, 6, 7, 8, 9, 10, 10, 10, 10, 9, 11, 1, 12, 13, 14, 15, 15, 14, 5, 16, 12, 6, 6, 6, 6, 12, 17, 6, 6, 15, 10, 6, 9, 18, 16, 11, 19, 16, 15, 15, 15, 15, 16, 15, 15, 13, 20, 18, 18, 11, 21, 12, 18, 12, 16, 16, 11, 15, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
