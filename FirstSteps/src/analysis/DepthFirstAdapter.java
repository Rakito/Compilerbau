/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPDef().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inADefineDef(ADefineDef node)
    {
        defaultIn(node);
    }

    public void outADefineDef(ADefineDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefineDef(ADefineDef node)
    {
        inADefineDef(node);
        if(node.getDefine() != null)
        {
            node.getDefine().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outADefineDef(node);
    }

    public void inAParaParas(AParaParas node)
    {
        defaultIn(node);
    }

    public void outAParaParas(AParaParas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaParas(AParaParas node)
    {
        inAParaParas(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAParaParas(node);
    }

    public void inAParasParas(AParasParas node)
    {
        defaultIn(node);
    }

    public void outAParasParas(AParasParas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParasParas(AParasParas node)
    {
        inAParasParas(node);
        if(node.getParas() != null)
        {
            node.getParas().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAParasParas(node);
    }

    public void inAIfex(AIfex node)
    {
        defaultIn(node);
    }

    public void outAIfex(AIfex node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfex(AIfex node)
    {
        inAIfex(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getQuery() != null)
        {
            node.getQuery().apply(this);
        }
        if(node.getMiddle() != null)
        {
            node.getMiddle().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIfex(node);
    }

    public void inAImpl(AImpl node)
    {
        defaultIn(node);
    }

    public void outAImpl(AImpl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImpl(AImpl node)
    {
        inAImpl(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAImpl(node);
    }

    public void inAFactorExpr(AFactorExpr node)
    {
        defaultIn(node);
    }

    public void outAFactorExpr(AFactorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorExpr(AFactorExpr node)
    {
        inAFactorExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorExpr(node);
    }

    public void inAFunctionExpr(AFunctionExpr node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpr(AFunctionExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExpr(AFunctionExpr node)
    {
        inAFunctionExpr(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionExpr(node);
    }

    public void inAConstructorExpr(AConstructorExpr node)
    {
        defaultIn(node);
    }

    public void outAConstructorExpr(AConstructorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstructorExpr(AConstructorExpr node)
    {
        inAConstructorExpr(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstructorExpr(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getHyphen() != null)
        {
            node.getHyphen().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inAFunctionFunction(AFunctionFunction node)
    {
        defaultIn(node);
    }

    public void outAFunctionFunction(AFunctionFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionFunction(AFunctionFunction node)
    {
        inAFunctionFunction(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        if(node.getLArrow() != null)
        {
            node.getLArrow().apply(this);
        }
        if(node.getReturns() != null)
        {
            node.getReturns().apply(this);
        }
        if(node.getRArrow() != null)
        {
            node.getRArrow().apply(this);
        }
        if(node.getFuncName() != null)
        {
            node.getFuncName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getImpl() != null)
        {
            node.getImpl().apply(this);
        }
        outAFunctionFunction(node);
    }

    public void inANilConst(ANilConst node)
    {
        defaultIn(node);
    }

    public void outANilConst(ANilConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANilConst(ANilConst node)
    {
        inANilConst(node);
        if(node.getCons() != null)
        {
            node.getCons().apply(this);
        }
        if(node.getConsName() != null)
        {
            node.getConsName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getImpl() != null)
        {
            node.getImpl().apply(this);
        }
        outANilConst(node);
    }

    public void inAConsConst(AConsConst node)
    {
        defaultIn(node);
    }

    public void outAConsConst(AConsConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConsConst(AConsConst node)
    {
        inAConsConst(node);
        if(node.getCons() != null)
        {
            node.getCons().apply(this);
        }
        if(node.getConsName() != null)
        {
            node.getConsName().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getImpl() != null)
        {
            node.getImpl().apply(this);
        }
        outAConsConst(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getAsterisk() != null)
        {
            node.getAsterisk().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMultFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAModFactor(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAIdTerm(AIdTerm node)
    {
        defaultIn(node);
    }

    public void outAIdTerm(AIdTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdTerm(AIdTerm node)
    {
        inAIdTerm(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdTerm(node);
    }

    public void inAExprTerm(AExprTerm node)
    {
        defaultIn(node);
    }

    public void outAExprTerm(AExprTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTerm(AExprTerm node)
    {
        inAExprTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExprTerm(node);
    }
}
