Helpers
 digit = ['0' .. '9'];
 letter = ['a' .. 'z'] | ['A' .. 'Z'];
 any_charater = [0x0 .. 0xfffff];

 

Tokens
 
 define = 'define';
 func = 'func';
 begin = 'begin';
 end = 'end';
 cons = 'cons';
 where = 'where';
 break = 'break';
 true = 'TRUE';
 false ='FALSE';
 returnt = 'return';
 
 id = letter ( digit | letter )*;
 number = digit+;
 plus = '+';
 hyphen = '-';
 asterisk = '*';
 percent = '%';
 dot = '.';
 comma = ',';
 query ='?';
 colon = ':';
 semicolon = ';';
 l_box = '[';
 r_box = ']';
 l_par = '(';
 r_par = ')';
 l_brace = '{';
 r_brace = '}';
 l_arrow = '<';
 r_arrow = '>';
 blank = (' ')*;
 dash = '-';
 ampersand = '&';
 slash = '/';
 question = '?';
 exclamation = '!';
 at = '@';
 tilde = '~';
 section = '¤';
 underscore = '_';
 pipe = '|';
 hash = '#';
 caret = '^';
 degree = '¡';
 blackslash ='\';
 equals = '=';
 
 return = ( 13 | 10 );
 comment = 'ÚÚ' any_charater;
 



Ignored Tokens
 comment, blank ;

Productions
 def =
   {define} T.define id equals expr;
   
 paras =
   {para} expr |
   {paras} paras comma expr;
 
 ifex =
  	[left]:expr query [middle]:expr colon [right]:expr;
 
 impl =
 	l_brace expr r_brace;
 
 expr =
  {factor} factor |
  {function} function |
  {constructor} const |
  {plus} expr plus factor |
  {minus} expr hyphen factor;
  
 function = 
   {function} T.func l_arrow [returns]:paras r_arrow [func_name]:id l_par [params]:paras r_par impl;

 const = 
   {nil} T.cons [cons_name]:id l_par r_par impl |
   {cons} T.cons [cons_name]:id l_par [params]:paras r_par impl;
   
 
 factor =
  {term} term |
  {mult} factor asterisk term |
  {div} factor slash term |
  {mod} factor percent term;


 term =
  {number} number |
  {id} id |
  {expr} l_par expr r_par;
  
 
